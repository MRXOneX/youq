// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  isAdmin Boolean @default(false)

  questions Question[]
  answers   Answer[]
  comments  Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Question {
  id Int @id @default(autoincrement())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  text  String @db.VarChar(3000)
  item  Item
  class Class

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?

  answers  Answer[]
  comments Comment[]
}

model Answer {
  id   Int    @id @default(autoincrement())
  text String @db.VarChar(3000)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  question   Question? @relation(fields: [questionId], references: [id])
  questionId Int?

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?
}

model Comment {
  id   Int    @id @default(autoincrement())
  text String @db.VarChar(300)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  question   Question? @relation(fields: [questionId], references: [id])
  questionId Int?

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?
}

enum Item {
  all
  mathematics
  literature
  algebra
  russian
  geometry
  english
  chemistry
  physics
  biology
  history
  social_studies
  surrounding_world
  geography
  informatics
  economy
  music
  right
  french
  obzh
  psychology
  astronomy
  physical_culture
}

enum Class {
  all
  junior
  middle
  senior
  college
}
